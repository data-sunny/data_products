datasets(galton)
dataset(galton)
dim(galton)
library(UsingR)
data(galton)
dim(galton)
head(galton)
library(reshape); long <- melt(galton)
library(reshape2)
long <- melt(galton)
dim(long)
head(long)
str(galton)
head(galton)
g <- ggplot( long, aex(x=value, fill=variable))
g <- ggplot( long, aes(x=value, fill=variable))
g
g <- g + geom_histogram(color="black", binwidth=1)
g
g <- g + facet_grid(.~variable)
g
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child-mu)^2)
g <- ggplot( galton, aex(x=child)) + geom_histogram(fill="salmon", colour="black", binwidth=1)
g <- g + ggtitle( paste("mu = ", mu, ", MSE = ", round(mse, 2), sep=""))
g
}
manipulate(myHist(mu), mu=slider(62, 74, step=0.5))
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child-mu)^2)
g <- ggplot( galton, aes(x=child)) + geom_histogram(fill="salmon", colour="black", binwidth=1)
g <- g + ggtitle( paste("mu = ", mu, ", MSE = ", round(mse, 2), sep=""))
g
}
manipulate(myHist(mu), mu=slider(62, 74, step=0.5))
install.packages("manipulate")
install.packages("manipulate")
?slider
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child-mu)^2)
g <- ggplot( galton, aes(x=child)) + geom_histogram(fill="salmon", colour="black", binwidth=1)
g <- g + geom_cline(xintercept = mu, size=3)
g <- g + ggtitle( paste("mu = ", mu, ", MSE = ", round(mse, 2), sep=""))
g
}
manipulate(myHist(mu), mu=slider(62, 74, step=0.5))
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child-mu)^2)
g <- ggplot( galton, aes(x=child)) + geom_histogram(fill="salmon", colour="black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size=3)
g <- g + ggtitle( paste("mu = ", mu, ", MSE = ", round(mse, 2), sep=""))
g
}
manipulate(myHist(mu), mu=slider(62, 74, step=0.5))
ggplot( galton, aes(x=parent, y=child))
ggplot( galton, aes(x=parent, y=child)) + geom_point()
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm( I(child-mean(child))~I(parent - mean(parent))-1, data=galton)
library(swirk)
library(swirl)
swirl()
swirl()
swirl
swirl()
install_from_swirl("Regression_Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm( child ~ parent, galton)
abline( regrline, lwd=3, col='red')
summary(regrline)
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline<-lm(child~parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm( child ~ parent, galton )
summary(fit)
0.0487
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coeff[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm( accel ~ mag+dist, attenu)
mean( efit$ residuals)
cov( efit$residuals, attneu$mag )
cov( efit$residuals, attenu$mag )
cov( efit$residuals, attenu$dist )
library(swril)
library(swirl)
swirl()
cor(gpa_nor,gch_nor)
l_nor <- lm( gch_nor ~ gpa_nor)
y <- galton$child
x <- galton$parent
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)))
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .07 * freqData$freq, xlab = "parent", ylab = "child")
abline(0,1,lwd=3)
abline(0,5,lwd=3)
abline(1,5,lwd=3)
abline(1,0.5,lwd=3)
abline(1,0.5,lwd=33)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2)) # est if sd around Reg line
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
fit <- lm(y ~ x);
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]) / 10
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
dat = rbind(p1, p2)
names(dat)[1] = "y"
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
p1
p2
?all
?alleaual
?allequal
?equal
?diff
diff(p1,p2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
dat = rbind(p1, p2)
names(dat)[1] = "y"
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
n = 100; x = rnorm(n); x2 = rnorm(n); x3 = rnorm(n)
y = 1 + x + x2 + x3 + rnorm(n, sd = .1)
ey = resid(lm(y ~ x2 + x3))
ex = resid(lm(x ~ x2 + x3))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(ey ~ ex - 1))
coef(lm(y ~ x + x2 + x3))
library(swirl)
swirl()
par( mfrow = c(1,3) )
plot( 0:10, dpois(0:10, lambda=2), type="h", frame=FALSE)
plot( 0:20, dpois(0:20, lambda=10), type="h", frame=FALSE)
plot( 0:200, dpois(0:210, lambda=100), type="h", frame=FALSE)
par( mfrow = c(1,3) )
plot( 0:10, dpois(0:10, lambda=2), type="h", frame=FALSE)
plot( 0:20, dpois(0:20, lambda=10), type="h", frame=FALSE)
plot( 0:200, dpois(0:200, lambda=100), type="h", frame=FALSE)
x <- 0:10000, lambda=3
mu <- sum( x * dpois(x, lambda=lambda))
sigmasq <- sum( (x-mu)^2 * dpois(x,lambda=lambda))
c( mu, sigmasq)
x <- 0:10000, lambda=3
x <- 0:10000; lambda=3
mu <- sum( x * dpois(x, lambda=lambda) )
sigmasq <- sum( (x-mu)^2 * dpois(x,lambda=lambda))
c( mu, sigmasq)
library(swirl)
swirl()
swirl()
ravenData
mdl <- glm( ravenWinNum ~ ravenScore)
mdl <- glm( ravenWinNum ~ ravenScore, data=ravenData)
mdl <- glm( ravenWinNum ~ ravenScore, family=binomial, data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
data("mtcars")
attach(mtcars)
sort(cor(mtcars))[1,]
sort(cor(mtcars)[1,])
broad <- lm( mpg ~ ., data=mtcars)
p <- sort( round( summary(broad)$coef[ ,4], 3) )
cat("ranked P-values based on an all inclusive simple linear model,  lm(mpg ~ .) are" )
cat( names(p[1]), "=", p[1],"     ",  names(p[2]), "=", p[2], "     ", names(p[3]), "=", p[3], "     ", names(p[4]), "=", p[4], "     ", names(p[5]), "=", p[5])
fitc <- lm( mpg ~ wt + wt*factor(am)-1, mtcars) # model C
fitc1 <- lm( mpg ~ wt + wt*factor(am), mtcars) # model C
summary(fitc1)
confit(fitc1)
confint(fitc1)
confint(fitc)
fitc <- lm( mpg ~ wt + wt*factor(am)-1, mtcars)
sumCoef <- summary(fitc)$coefficients
# calculate ci
ci <- round( sumCoef[3,1] + c(-1, 1) * qt(.975, df = fitc$df) * sumCoef[3, 2], 1)
ci
?t.test
?qnorm
?tnorm
qt(0.95,14)
qt(0.975,14)
summary(fitc)
fitc$resid
summary(fitc)$resid
summary(fitc)$pval
summary(fitc)$pvalue
summary(fitc)$Pvalue
summary(fitc)$coef
summary(fitc)$rsqr
summary(fitc)$rsquared
summary(fitc)$r
fita <- lm( mpg ~ factor(am)-1, mtcars)
summary(fit1)
summary(fita)
fita1 <- lm( mpg ~ factor(am), mtcars)
summary(fita1)
fitb1 <- lm( mpg ~ wt + factor(am), mtcars) # model B
summary(fitb1)
summary(fitc1)
# quiz 4 RM, q1
library(MASS)
dim(shuttle); head(shuttle)
# add a new column for use,auto =1 and use, non-auto=0
dat <- shuttle
dat$use_code[dat$use=="auto"]<-1
dat$use_code[dat$use=="noauto"]<-0
logr_shuttle <- glm(use_code ~ wind, family= "binomial", data=dat)
summary(logr_shuttle)
coef(logr_shuttle)
library(ElemStatLearn)
data(prostate)
str(prostate)
small = prostate[1:5,]
lm( lpsa ~ ., data=small)
dim(prostate)
dim(small)
names(small)
library(ISLR)
data(Wage)
library(ggplot2);
library(caret)
inBuild <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
dim(Wage)
dim(inBuild)
validation <- Wage[-inBuild,]
buildData <- Wage[inBuild, ]
dim(validation)
dim(buildData)
inTrain <- createDataPartition( y=buildData$wage, p=0.7, list=FALSE)
training <- buildData[inTrain,]
testing <- buildData[-inTrain,]
dim(Wage)
dim(inTrain)
dim(training)
dim(testing)
dim(buildData)
dim(validation)
dim(inBuild)
dim(inTrain)
Wage <- subset(Wage,select=-c(logwage))
# create a building data set and validaton set
inBuild <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
validation <- Wage[-inBuild,]
buildData <- Wage[inBuild, ]
inTrain <- createDataPartition( y=buildData$wage, p=0.7, list=FALSE)
training <- buildData[inTrain,]
testing <- buildData[-inTrain,]
dim(Wage)
dim(validation)
dim(training)
dim(testing)
mod1 <- train(wage ~., method="glm", data = training)
mod2 <- train(wage ~., method="rf", data=training, trControl=trainControl(method="cv"), number=3)
pred1 <- predict(mod1,testing)
pred2 <- predict(mod2, testing)
qplot(pred1,pred2, colour=wage, data=testing)
predDF <- data.frame( pred1, pred2, wage=testing$wage )
dim(preDF)
dim(predDF)
head(predDF)
combModFit <- train( wage ~., method="gam", data=preDF)
combModFit <- train( wage ~., method="gam", data=predDF)
combPred <- predict( combModFit, preDF )
combPred <- predict( combModFit, predDF )
sqrt( sum( (pred1 - testing$wage)^2 ))
sqrt( sum( (pred2 - testing$wage)^2 ))
sqrt( sum( (combPred - testing$wage)^2 ))
pred1V <- predict(mod1, validation)
pred2V <- predict(mod2, validation)
predVDF <- data.frame( pred1V, pred2V, pred2=pred2V )
combPredV <- predict( combModFit, predVDF )
predVDF <- data.frame( pred1V, pred2V, pred2=pred2V )
combPredV <- predict( combModFit, predVDF )
pred1V <- predict(mod1, validation)
pred2V <- predict(mod2, validation)
predVDF <- data.frame( pred1V, pred2V, pred2=pred2V )
combPredV <- predict( combModFit, predVDF )
predVDF <- data.frame( pred1=pred1V, pred2=pred2V )
combPredV <- predict( combModFit, predVDF )
sqrt( sum( (pred1V - validation$wage)^2 ))
sqrt( sum( (pred2V - validation$wage)^2 ))
sqrt( sum( (combPred - validation$wage)^2 ))
sqrt( sum( (combPredV - validation$wage)^2 ))
library(quantmod)
install.packages("quantmod")
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts( googOpen, frequency=12 )
plot( ts1, xlab="Years+1", ylab="GOOG")
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
getSymbols("GOOG", src="google", from=from.dat, to=to.dat)
plot( decomposie(ts1), xlab="Years+1")
plot( decompose(ts1), xlab="Years+1")
ts1Train <- window( ts1, start=1, end=5)
ts1Test <- window( ts1, start=5, end=(7-0.01))
ts1Train
ets1 <- ets( ts1Train, model="MMM")
fcast <- forecast( ets1 )
plot( fcast )
lines( ts1Test, col="red")
accuracy( fcast, ts1Test )
data( iris ); library( ggplot 2)
library( ggplot2 )
inTrain <- createDataPartition( y = iris$Species, p=0.7, list=FALSE )
training <- iris[ inTrain, ]
testing <- iris[ -inTrain, ]
dim(training); dim(testing)
dim(iris)
kMeans1 <- kmeans( subset( training, select=-c(Species)), centers=3)
training$clusters <- as.factor( kMeans1$cluster )
qplot( Petal.Width, Petal.Length, colour=cluster, data=training )
qplot( Petal.Width, Petal.Length, colour=clusters, data=training )
table( kMeans1$cluster, training$Species )
modFit <- train( clusters ~., data=subset(training, select=-c(Species)), method="rpart")
table( predict(modFit,training), training$Species)
testClusterPred <- predict( modFit, testing)
table( testClusterPred, testing$Species)
setwd("C:/Users/Trader/Desktop/Coursera/Data_Products")
shiny::runApp('course_project')
